---
import { Image } from "astro:assets";
import Comments from "../components/Comments.vue";
import DeviceFrameSection from "../components/presentations/DeviceFrameSection.astro";
import mapImage from "../images/ssc25/15.png";
import heroImage from "../images/ssc25/hero.png";
import appIcon from "../images/ssc25/logo.png";
import Layout from "../layouts/Layout.astro";
import Footer from "../sections/Footer.astro";
import { ImageSizePreset } from "../utils/images";
import map1Image from "../images/ssc25/map1.png";
import map2Image from "../images/ssc25/map2.png";
import map3Image from "../images/ssc25/map3.png";
import map4Image from "../images/ssc25/map4.png";
import map5Image from "../images/ssc25/map5.png";
import map6Image from "../images/ssc25/map6.png";
---

<Layout title="Swift Student Challenge 2025">
  <div class="grid-array-6">
    <div class="ssc-color-orange-bg"></div>
    <div class="ssc-color-pink-bg"></div>
    <div class="ssc-color-dark-blue-bg"></div>
    <div class="ssc-color-light-blue-bg"></div>
    <div class="ssc-color-green-bg"></div>
  </div>
  <section class="hero">
    <h1>Ma participation au <br /><mark>Swift Student Challenge</mark> 2025</h1>
    <small>English version coming later</small>

    <DeviceFrameSection>
      <Image
        class:list={[ImageSizePreset.TabletAndPhone]}
        src={heroImage}
        alt=""
      />
    </DeviceFrameSection>
  </section>
  <section class="content">
    <DeviceFrameSection placement="frameFirst" height="fitContent">
      <Image slot="frame" src={appIcon} alt="" class:list={["icon"]} />
      <div>
        <h2>Halobus</h2>
        <p class="important">
          Halobus est une application hors ligne qui affiche l’ensemble du
          réseau de transports en commun de Nice, avec la position actuelle de
          tous les bus et tramways. Elle met en valeur l’étendue du réseau et
          invite les utilisateurs à <mark>explorer la ville sans voiture</mark>.
        </p>
      </div>
    </DeviceFrameSection>

    <div class="idea">
      <Comments githubIssueId={6} client:visible />
      <h2>Idée</h2>
      <p>
        J'ai eu l'idée de cette application en prenant connaissance des
        contraintes imposées pour ce défi. En effet, il faut une application :
        <ul>
          <li>Légère (25 MB)</li>
          <li>Qui fonctionne hors-ligne</li>
          <li>Qui puisse se tester en moins de 3 minutes.</li>
        </ul>
      </p>
      <p>
        J'ai voulu réinvestir mes connaissances acquises en développant Wagon,
        j'ai donc reflechi à une application sur la thématique des transports en
        commun, qui intégrerait ces contraintes.
      </p>
      <p>
        Mais je ne voulais pas une application trop basique, il me fallait un
        côté "Waouh". C'est ainsi que m'est venue l'idée : une application 100%
        hors-ligne, ou l'on verrait les bus bouger sur une carte ; <mark
          >simple en apparence</mark
        >, mais plutôt technique à réaliser.
      </p>
    </div>
  </section>

  <section class="technical">
    <h2>Défis techniques</h2>
    <p>
      Pour respecter les contraintes, j'ai fait face à quelques difficultés en
      réalisant mon app.
    </p>
    <h3>Carte hors-ligne</h3>
    <p>
      Bien qu'Apple Plan propose un mode hors-ligne depuis iOS 17, le SDK
      disponible dans Swift UI ne propose pas d'option analogue. J'ai recréé ma
      propre carte à partir des données OpenStreetMap et des options permises
      par MapKit.
    </p>
  </section>

  <div id="map-anchor-start"></div>
  <section style="padding: 0">
    <div
      class="mapSticky"
      data-scroll
      data-scroll-anchor-from="map-anchor-start"
      data-scroll-anchor-to="map-anchor-end"
      data-scroll-from-height-vh="-80"
      data-scroll-to-height-vh="0"
      data-scroll-bezier="0,0,1,1"
    >
      <Image src={map1Image} alt="" />
      <Image src={map2Image} alt="" />
      <Image src={map3Image} alt="" />
      <Image src={map4Image} alt="" />
      <Image src={map5Image} alt="" />
      <Image src={map6Image} alt="" />
      <ol>
        <li>Initialisation de la carte Apple Plan, centrée sur Nice.</li>
        <li>Affichage en mode satellite, pour retirer les labels.</li>
        <li>
          Itération sur l'extrait OSM pour dessiner des polygones de couleur sur
          la carte.
        </li>
      </ol>
    </div>
  </section>
  <div id="map-anchor-end"></div>

  <section style="padding-top: 0;">
    <h3>Taille des données</h3>
    <p>
      C'est un choix crucial pour l'application : Comment stocker efficacement
      les données pour être capable d'afficher tous les bus du réseau <mark
        >à chaque instant</mark
      >, de manière précise et ce pour tous les jours de l'année ?
    </p>
    <p>
      J'ai d'abord pensé à stocker, pour chaque moment dans la journée (disons
      toutes les 10 secondes) la position de tous les véhicules en service. Mais
      les données étaient beaucoup trop volumineuses. En stockant de cette
      manière, on avait trop de répétitions de données.
    </p>
    <!-- https://gtfs.org -->
    <p>
      J'ai donc opté pour une approche plus proche du format de stockage dans le
      GTFS, en retirant le maximum d'informations inutiles à mon app. Je me
      retrouve donc avec 5 extraits JSON :
    </p>
    <ul>
      <li>
        <code>calendar</code> qui liste tous les services et leur période de validité.
        Par exemple, c'est ce fichier qui dira que le service <code>1839</code> est
        valide du 1er janvier au 1er juillet, mais uniquement les dimanches.
      </li>
      <li>
        <code>calendar_dates</code> qui spécifie toutes les exceptions (jours fériés
        et vacances entre autres) liées aux services précédemment cités.
      </li>
      <li>
        <code>trips</code> contient tous les trajets possibles, i.e. la suite des
        arrêts desservis et l'heure de passage.
      </li>
      <li><code>stops</code> liste tous les arrêts de la ville.</li>
      <li><code>routes</code> liste toutes les lignes de la ville</li>
      <li>
        <code>shapes</code> repertorie les routes liées aux trajets. Pour optimiser
        les formes, j'ai réduit la précision des coordonnées GPS et j'ai appliqué
        l'algortihme de <a
          href="https://fr.wikipedia.org/wiki/Algorithme_de_Douglas-Peucker"
          >Douglas-Peucker</a
        >.
      </li>
    </ul>
    <p>
      Une autre optimisation consiste en la rénumérotation des IDs du GTFS, qui
      sont étrangement extremement verbeux.
      <br /><br />
      <code>102031</code>
      <i>au lieu de</i>
      <code> chouette:TimeTable:43c17fa7-3a55-4e11-95e1-7ac11d989e14:LOC </code>
    </p>
    <h3>Tester le Playground</h3>
    <a class="download" href="https://cdn1.arno.cl/2025/03/HaloBus.swiftpm.zip">
      Télécharger le Playground
    </a>
    <br /><br />
    <small>
      Requiert un Mac ou un iPad avec l'application Swift Playground
      d'installée.
    </small>
  </section>
  <Footer />
</Layout>

<style>
  .grid-array-6 {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    height: calc(15px + 64px);
  }

  .ssc-color-orange-bg {
    background-color: #fd5d00;
  }
  .ssc-color-pink-bg {
    background-color: #b143ae;
  }
  .ssc-color-purple-bg {
    background-color: #451ea9;
  }
  .ssc-color-dark-blue-bg {
    background-color: #272acf;
  }
  .ssc-color-light-blue-bg {
    background-color: #00a0fd;
  }
  .ssc-color-green-bg {
    background-color: #009966;
  }

  section.hero {
    padding-top: 20vh;
    padding-bottom: 10vh;
    background: linear-gradient(
      to bottom,
      #fd5d0000 20%,
      #fd5d0030 80%,
      #b143ae70 100%
    );
  }

  section {
    padding: 0 var(--navbar-horizontal-padding);
  }

  section.content {
    margin-top: -16vh;
    padding-top: 10vh;
    padding-bottom: 10vh;
    background: linear-gradient(
      to bottom,
      rgba(180, 180, 180, 0),
      rgba(180, 180, 180, 0.16) 20%,
      rgba(180, 180, 180, 0.16)
    );
  }

  section.technical {
    padding-top: 5vh;
    padding-bottom: 10vh;
  }

  .idea {
    padding-left: calc(40vh + 10vw);
  }

  h1 {
    font-size: max(40px, 4vw);
  }

  h2 {
    margin-top: 56px;
    margin-bottom: 22px;
    font-size: 40px;
  }

  h3 {
    font-size: 32px;
  }

  p,
  ol,
  ul {
    margin: 16px 0;
    font-size: 18px;
    opacity: 0.7;
  }

  p.important {
    font-size: 22px;
  }

  .icon {
    height: 40vh;
    width: auto;
    border-radius: 24%;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }

  a.download {
    font-size: 20px;
  }

  code {
    padding: 2px 4px;
    background-color: rgba(155, 155, 155, 0.2);
    border-radius: 4px;
  }

  mark {
    background-color: #ffc089;
  }

  .mapSticky {
    position: relative;
    height: 200vh;
    transform: translateY(calc(var(--progress) * 100vh - 50vh));
    user-select: none;
    pointer-events: none;
  }

  .mapSticky img {
    position: absolute;
    top: 50%;
    width: 100%;
    height: 100vh;
    object-fit: cover;
    transform: translateY(-50%);
  }

  .mapSticky img:nth-child(2) {
    opacity: calc(var(--progress) * 6);
  }

  .mapSticky img:nth-child(3) {
    opacity: calc((-0.3 + var(--progress)) * 10);
  }

  .mapSticky img:nth-child(4) {
    opacity: calc((-0.4 + var(--progress)) * 12);
  }

  .mapSticky img:nth-child(5) {
    opacity: calc((-0.5 + var(--progress)) * 14);
  }

  .mapSticky img:nth-child(6) {
    opacity: calc((-0.6 + var(--progress)) * 18);
  }

  .mapSticky ol {
    display: flex;
    flex-direction: column;
    gap: 10vh;
    padding: 0 var(--navbar-horizontal-padding);
    position: fixed;
    top: 30%;
    left: 0;
    font-size: 40px;
    color: black;
    transform: translateY(calc(var(--progress) * -50vh));
  }

  .mapSticky ol li:nth-child(1) {
    color: black;
    opacity: calc(1 + var(--progress) * -10);
  }

  .mapSticky ol li:nth-child(2) {
    opacity: calc((-0 + var(--progress)) * 4);
    color: white;
    text-shadow: 0 0 10px black;
  }

  .mapSticky ol li:nth-child(3) {
    opacity: calc((-0.2 + var(--progress)) * 4);
    color: black;
  }
</style>
